from typing import Generic, Optional, Type, TypeVar

from sqlmodel import Session, select

from .model import Model

ModelType = TypeVar("ModelType", bound=Model)


class Manager(Generic[ModelType]):
    """
    Generic database manager for SQLModel entities.

    Provides common CRUD operations for SQLModel entities.
    """

    def __init__(self, model: Type[ModelType], engine):
        """
        Initialize the manager.

        Args:
            model (Type[ModelType]): The SQLModel class this manager operates on.
            engine: The SQLAlchemy engine for database operations.
        """
        self.model = model
        self.engine = engine

    def add(self, entity: ModelType) -> ModelType:
        """
        Add a single entity to the database.

        Args:
            entity (ModelType): The entity to add.

        Returns:
            ModelType: The added entity with updated fields (e.g., autogenerated IDs).
        """
        with Session(self.engine) as session:
            session.add(entity)
            session.commit()
            session.refresh(entity)
            return entity

    def delete(self, entity_id: int) -> None:
        """
        Delete a single entity by its ID.

        Args:
            entity_id (int): The ID of the entity to delete.

        Raises:
            ValueError: If the entity does not exist.
        """
        with Session(self.engine) as session:
            entity = session.get(self.model, entity_id)
            if not entity:
                raise ValueError(f"Entity with ID {entity_id} does not exist.")
            session.delete(entity)
            session.commit()

    def add_all(self, entities: list[ModelType]) -> None:
        """
        Add multiple entities to the database in bulk.

        Args:
            entities (list[ModelType]): A list of entities to add.
        """
        with Session(self.engine) as session:
            session.bulk_save_objects(entities)
            session.commit()

    def get(self, entity_id: int) -> ModelType | None:
        """
        Retrieve a single entity by its ID.

        Args:
            entity_id (int): The ID of the entity.

        Returns:
            Optional[ModelType]: The entity if found, otherwise None.
        """
        with Session(self.engine) as session:
            return session.get(self.model, entity_id)

    def all(self) -> list[ModelType]:
        """
        Retrieve all entities.

        Returns:
            list[ModelType]: A list of all entities.
        """
        with Session(self.engine) as session:
            return session.exec(select(self.model)).all()

    def filter(self, **kwargs) -> list[ModelType]:
        """
        Retrieve entities that match filter criteria.

        Args:
            **kwargs: Filter criteria as key-value pairs.

        Returns:
            list[ModelType]: A list of matching entities.
        """
        with Session(self.engine) as session:
            return session.exec(select(self.model).filter_by(**kwargs)).all()

    def first(self, **kwargs) -> Optional[ModelType]:
        """
        Retrieve the first entity that matches filter criteria.

        Args:
            **kwargs: Filter criteria as key-value pairs.

        Returns:
            Optional[ModelType]: The first matching entity if found, otherwise None.
        """
        with Session(self.engine) as session:
            return session.exec(select(self.model).filter_by(**kwargs)).first()

    def paginate(self, page: int, per_page: int) -> list[ModelType]:
        """
        Retrieve a paginated list of entities.

        Args:
            page (int): The page number (starting from 1).
            per_page (int): The number of entities per page.

        Returns:
            list[ModelType]: A list of entities for the specified page.
        """
        with Session(self.engine) as session:
            statement = select(self.model).offset((page - 1) * per_page).limit(per_page)
            return session.exec(statement).all()

    def update(self, entity: ModelType) -> ModelType:
        """
        Update an entity in the database.

        Args:
            entity (ModelType): The entity to update.

        Returns:
            ModelType: The updated entity.
        """
        with Session(self.engine) as session:
            session.add(entity)
            session.commit()
            session.refresh(entity)
            return entity

    def exists(self, entity_id: int) -> bool:
        """
        Check if an entity exists by its ID.

        Args:
            entity_id (int): The ID of the entity.

        Returns:
            bool: True if the entity exists, False otherwise.
        """
        with Session(self.engine) as session:
            return session.get(self.model, entity_id) is not None

    def count(self) -> int:
        """
        Count the number of entities.

        Returns:
            int: The total count of entities.
        """
        with Session(self.engine) as session:
            return session.exec(select(self.model)).count()
