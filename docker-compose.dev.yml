version: '3.8'

services:
  app:
    build:
      context: ./src/ # Points to the current directory where the Dockerfile is located
      dockerfile: Dockerfile # The Dockerfile used to build the application image
    volumes:
      - .:/bot # Mounts the current directory (source code) into the container for development
    env_file:
      - .env
    expose:
      - "8000" # Exposes port 8000 internally for communication within the Docker network (not publicly exposed)
    networks:
      - internal_network # Connects the app service to the internal network for secure communication with other services
    depends_on:
      - postgres_db # Ensures that the PostgreSQL database starts before the app service
    restart: on-failure

  postgres_db:
    build:
      context: ./src/ # Path to the Dockerfile for PostgreSQL
      dockerfile: ./database/Dockerfile # PostgreSQL Dockerfile
    volumes:
      - db_data:/var/lib/postgresql/data # Mounts a persistent volume to store PostgreSQL data, ensuring data is not lost on container restart
    env_file:
      - .env
    networks:
      - internal_network # PostgreSQL service is on the same internal network, allowing only internal services to access it
    environment:
      POSTGRES_USER: ${POSTGRES_USER} # Use environment variables from .env file for configuration
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}

  nginx:
    image: nginx:1.27 # Use the latest stable version of NGINX
    volumes:
      - ./nginx/default.dev.conf:/etc/nginx/conf.d/default.conf # Maps the local NGINX configuration file to the container for customization
    ports:
      - "80:80" # Exposes port 80 to the public, allowing external traffic to reach the NGINX server
    depends_on:
      - app # Ensures the app service starts before NGINX begins
    networks:
      - internal_network # Connects NGINX to the internal network to communicate with the app service

volumes:
  db_data:
    driver: local # Defines a volume for storing PostgreSQL data persistently

networks:
  internal_network:
    driver: bridge # Creates an internal bridge network for isolated service communication
